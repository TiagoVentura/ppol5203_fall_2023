import numpy as np
|# echo: false
import pandas as pd
import numpy as np
from plotnine import * # to imitate ggplot
from gapminder import gapminder # bring data
import warnings
warnings.filterwarnings('ignore') # Ignore warnings
# Read in data
gapminder.head()
# create to new log variables
gapminder = (gapminder
.assign(lngdpPercap = np.log(gapminder["gdpPercap"]),
lnpop = np.log(gapminder["pop"]))
)
#| echo: false
import pandas as pd
import numpy as np
from plotnine import * # to imitate ggplot
from gapminder import gapminder # bring data
import warnings
warnings.filterwarnings('ignore') # Ignore warnings
# Read in data
gapminder.head()
# create to new log variables
gapminder = (gapminder
.assign(lngdpPercap = np.log(gapminder["gdpPercap"]),
lnpop = np.log(gapminder["pop"]))
)
# build in plotnine graph
# step 1: data
(ggplot(data=gapminder) +
# step 2: geom
geom_point(
# step 3: aesthethics
aes(x="lngdpPercap", y="lifeExp"))
)
import warnings
500*3
(500*3)/60
income <- rescale(y, to = c(0, 5000))
## Data creation
set.seed(2313)
library(ggplot2)
library(patchwork)
install.packages("patchwork")
install.packages("patchwork")
library(scales)
library(ggplot2)
library(scales)
## Data creation
set.seed(2313)
n <- 500
x <- rnorm(n)
y <- x^3 + rnorm(n, sd = 3)
age <- rescale(x, to = c(0, 100))
income <- rescale(y, to = c(0, 5000))
age_inc <- data.frame(age = age, income = income)
## Data creation
y_axis <- scale_y_continuous(labels = dollar_format(suffix = "€", prefix = ""),
limits = c(0, 5000),
name = "Income")
x_axis <- scale_x_continuous(name = "Age")
bad_fit <-
ggplot(age_inc, aes(age, income)) +
geom_point() +
geom_smooth(method = "lm") +
y_axis +
x_axis +
ggtitle("Underfit") +
theme_linedraw()
overfit <-
ggplot(age_inc, aes(age, income)) +
geom_point() +
geom_smooth(method = "loess", span = 0.015) +
y_axis +
x_axis +
ggtitle("Overfit") +
theme_linedraw()
goodfit <-
ggplot(age_inc, aes(age, income)) +
geom_point() +
geom_smooth(method = "loess", span = 0.9) +
y_axis +
x_axis +
ggtitle("Ideal fit") +
theme_linedraw()
bad_fit + overfit + goodfit
devtools::install_github("thomasp85/patchwork")
library(ggplot2)
library(scales)
## Data creation
set.seed(2313)
n <- 500
x <- rnorm(n)
y <- x^3 + rnorm(n, sd = 3)
age <- rescale(x, to = c(0, 100))
income <- rescale(y, to = c(0, 5000))
age_inc <- data.frame(age = age, income = income)
## Data creation
y_axis <- scale_y_continuous(labels = dollar_format(suffix = "€", prefix = ""),
limits = c(0, 5000),
name = "Income")
x_axis <- scale_x_continuous(name = "Age")
bad_fit <-
ggplot(age_inc, aes(age, income)) +
geom_point() +
geom_smooth(method = "lm") +
y_axis +
x_axis +
ggtitle("Underfit") +
theme_linedraw()
overfit <-
ggplot(age_inc, aes(age, income)) +
geom_point() +
geom_smooth(method = "loess", span = 0.015) +
y_axis +
x_axis +
ggtitle("Overfit") +
theme_linedraw()
goodfit <-
ggplot(age_inc, aes(age, income)) +
geom_point() +
geom_smooth(method = "loess", span = 0.9) +
y_axis +
x_axis +
ggtitle("Ideal fit") +
theme_linedraw()
bad_fit + overfit + goodfit
library(patchwork)
library(ggplot2)
library(patchwork)
library(scales)
## Data creation
set.seed(2313)
n <- 500
x <- rnorm(n)
y <- x^3 + rnorm(n, sd = 3)
age <- rescale(x, to = c(0, 100))
income <- rescale(y, to = c(0, 5000))
age_inc <- data.frame(age = age, income = income)
## Data creation
y_axis <- scale_y_continuous(labels = dollar_format(suffix = "€", prefix = ""),
limits = c(0, 5000),
name = "Income")
x_axis <- scale_x_continuous(name = "Age")
bad_fit <-
ggplot(age_inc, aes(age, income)) +
geom_point() +
geom_smooth(method = "lm") +
y_axis +
x_axis +
ggtitle("Underfit") +
theme_linedraw()
overfit <-
ggplot(age_inc, aes(age, income)) +
geom_point() +
geom_smooth(method = "loess", span = 0.015) +
y_axis +
x_axis +
ggtitle("Overfit") +
theme_linedraw()
goodfit <-
ggplot(age_inc, aes(age, income)) +
geom_point() +
geom_smooth(method = "loess", span = 0.9) +
y_axis +
x_axis +
ggtitle("Ideal fit") +
theme_linedraw()
bad_fit + overfit + goodfit
16/104
(.15*20000)*12
(.30*20000)*12
- http://mywebsite.com/: API root. The domain of your api/
library(how2scrape)
30*600
(16*120)*1.2
-   The $\cdot$ here means a dot product: $\sum_j \mathbf{a_j} \cdot \mathbf{b_j}$
# Plot
D %>%
ggplot(aes(x,y)) +
geom_point(alpha=.7,size=5,color="grey30") +
theme_bw() +
geom_line(aes(x,yhatA),color="blue",size=3,alpha=.6) +
theme(legend.position = "none",
axis.title = element_text(size=20),
axis.text = element_text(size=18))
library(ggplot2)
library(patchwork)
library(scales)
y <- X%*%B + rnorm(N,mean = 0,.2)
libra
set.seed(123)
N = 100
x <- rnorm(N)
X <- splines::bs(x,degree=7)
B <- runif(7,-5,5)
y <- X%*%B + rnorm(N,mean = 0,.2)
D = tibble(x,y = as.numeric(y))
library(tidyverse)
set.seed(123)
N = 100
x <- rnorm(N)
X <- splines::bs(x,degree=7)
B <- runif(7,-5,5)
y <- X%*%B + rnorm(N,mean = 0,.2)
D = tibble(x,y = as.numeric(y))
modA = lm(y ~ x,data = D)
D$yhatA = predict(modA,D)
# Plot
D %>%
ggplot(aes(x,y)) +
geom_point(alpha=.7,size=5,color="grey30") +
theme_bw() +
geom_line(aes(x,yhatA),color="blue",size=3,alpha=.6) +
theme(legend.position = "none",
axis.title = element_text(size=20),
axis.text = element_text(size=18))
library(tidyverse)
set.seed(123)
N = 100
x <- rnorm(N)
X <- splines::bs(x,degree=7)
B <- runif(7,-5,5)
y <- X%*%B + rnorm(N,mean = 0,.2)
D = tibble(x,y = as.numeric(y))
modA = lm(y ~ x,data = D)
D$yhatA = predict(modA,D)
modD = lm(y ~ poly(x,21),data = D)
D$yhatD = predict(modD,D)
D2 = D
D2$pred = predict(lm(y~x,data=D))
modB = lm(y ~ poly(x,2),data = D)
D$yhatB = predict(modB,D)
modC = lm(y ~ poly(x,5),data = D)
D$yhatC = predict(modC,D)
mse = function(y,yh) { mean((y-yh)^2) }
D %>%
gather(mod,yh,-y,-x) %>%
mutate(mod = str_remove(mod,"yhat")) %>%
group_by(mod) %>%
mutate(mse =mean((y-yh)^2),
mse_txt = str_glue("Model {mod}\nMSE = {round(mse,3)}")) %>%
ggplot(aes(x,y)) +
geom_point(alpha=.7,size=3,color="grey30") +
geom_line(aes(x,yh),color="blue",size=2,alpha=.6) +
theme_bw() +
facet_wrap(~mse_txt) +
theme(legend.position = "none",
axis.title = element_text(size=18),
axis.text = element_text(size=20),
strip.text = element_text(size=24),
text = element_text(family="serif"))
set.seed(321)
N = 100
x <- rnorm(N)
X <- splines::bs(x,degree=7)
# Use the same betas
y <- X%*%B + rnorm(N,mean = 0,.5)
D2 = tibble(x,y = as.numeric(y))
D2$yhatA = predict(modA,D2)
D2$yhatB = predict(modB,D2)
D2$yhatC = predict(modC,D2)
D2$yhatD = predict(modD,D2)
# Define Sets
D$set = "Training Set"
D2$set = "Test Set"
DD = bind_rows(D,D2)
D2 %>%
gather(mod,yh,-y,-x,-set) %>%
mutate(mod = str_remove(mod,"yhat")) %>%
group_by(mod) %>%
mutate(mse =mean((y-yh)^2),
mse_txt = str_glue("Model {mod}\nMSE = {round(mse,3)}")) %>%
ggplot(aes(x,y)) +
geom_point(alpha=.7,size=3,color='forestgreen') +
geom_line(aes(x,yh),color="blue",size=2,alpha=.6) +
theme_bw() +
facet_wrap(~mse_txt,scale="free") +
# ylim(-5,5) +
theme(legend.position = "none",
axis.title = element_text(size=18),
axis.text = element_text(size=20),
strip.text = element_text(size=24),
text = element_text(family="serif"))
DD = bind_rows(D2)
D2 %>%
gather(mod,yh,-y,-x,-set) %>%
mutate(mod = str_remove(mod,"yhat")) %>%
group_by(mod) %>%
mutate(mse =mean((y-yh)^2),
mse_txt = str_glue("Model {mod}\nMSE = {round(mse,3)}")) %>%
ggplot(aes(x,y)) +
geom_point(alpha=.7,size=3,color='forestgreen') +
geom_line(aes(x,yh),color="blue",size=2,alpha=.6) +
theme_bw() +
facet_wrap(~mse_txt,scale="free") +
# ylim(-5,5) +
theme(legend.position = "none",
axis.title = element_text(size=18),
axis.text = element_text(size=20),
strip.text = element_text(size=24),
text = element_text(family="serif"))
## Workflow
-   **Apply method appropriate to research goal:**
### Week 1
### Week 1
### Week 1
